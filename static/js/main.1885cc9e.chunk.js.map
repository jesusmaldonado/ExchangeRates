{"version":3,"sources":["utils/countryIconsMap.js","components/Pocket.js","components/Pockets.js","components/ExchangeRateDisplay.js","components/PocketSelect.js","components/CurrencyInput.js","components/ExchangeTypeForm.js","utils/checkNumberFormat.js","reducers/baseReducer.js","stores/inputStore.js","components/Exchange.js","hooks/usePrevious.js","hooks/useDetectChangeCurrencyType.js","hooks/useCurrentExchangeRate.js","hooks/useError.js","components/CurrencyExchange.js","hooks/useRates.js","App.js","serviceWorker.js","index.js"],"names":["cIconMap","cSymbolMap","Pocket","currency","amount","className","Pockets","pockets","scope","map","type","key","ExchangeRateDisplay","currentExchangeRate","split","currencyUnits","rate","baseCurrency","secondaryCurrency","PocketSelect","input","index","handleOnChangeCurrency","possiblePockets","id","value","data-index","required","onChange","pocket","CurrencyInput","errorMessage","handleOnChangeAmount","clsx","onBlur","ExchangeTypeForm","setPockets","p","checkNumberFormat","String","replace","changeCurrencyAmountReducer","state","newCurrencyAmount","indexOfCurrentInput","rates","inputs","sanitizedNewCurrencyAmount","indexToChange","secondaryAmount","correctRate","Number","convertedCurrencyAmount","idx","baseReducer","action","newCurrencyUnit","currentInput","currentType","currentInputAmount","otherInput","find","inp","i","otherInputType","otherInputAmount","changeCurrencyUnitReducer","payload","resetCurrencyReducer","Error","inputStore","Exchange","useReducer","dispatch","previousInputs","ref","useRef","useEffect","current","usePrevious","previousTypes","join","currentTypes","useDetectChangeCurrencyType","useState","setCurrentExchangeRate","Object","keys","length","toFixed","useCurrentExchangeRate","evt","target","dataset","setErrorMessage","primaryInputType","primaryInputAmount","currentAmount","maximumAmount","useError","isButtonDisabled","onClick","firstInputType","firstInputAmount","secondInputType","secondInputAmount","newPockets","castedFirstInputAmount","newAmount","castedSecondInputAmount","disabled","CurrencyExchange","jsonResults","setRates","abortController","AbortController","signal","fetchData","a","fetch","resUSD","resEuro","resGBP","Promise","all","json","console","log","currencies","rdc","reduce","obj","base","ratesNotIncluded","filter","acc","setInterval","clearInterval","abort","useRates","role","aria-hidden","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1885cc9e.chunk.js","sourcesContent":["export const cIconMap = {\n  'USD': 'us',\n  'EUR': 'eu',\n  'GBP': 'gb'\n}\nexport const cSymbolMap = {\n  'USD': '$',\n  'EUR': '€',\n  'GBP': '£'\n}\n","import React from 'react'\nimport { cIconMap, cSymbolMap } from '../utils/countryIconsMap';\nexport default function Pocket({currency, amount}){\n  return (\n      <tr>\n        <td className=\"text-center\">\n          <span\n            className={`flag-icon flag-icon-${cIconMap[currency]}`}>\n          </span>\n        </td>\n        <td className=\"text-center\">\n          <span>{`${cSymbolMap[currency]}${amount}`}</span>\n        </td>\n      </tr>\n  )\n};\n","import React from 'react';\nimport Pocket from './Pocket'\n\nexport default function Pockets({pockets}){\n  return (\n    <table className=\"table table-sm pockets mx-auto mt-6\">\n    <thead>\n      <tr>\n        <th className=\"text-center\" scope=\"col\">Currency</th>\n        <th className=\"text-center\" scope=\"col\">Current Amount</th>\n      </tr>\n    </thead>\n    <tbody>\n      {(pockets).map(({type, amount}) => (\n        <Pocket\n          key={type}\n          currency={type}\n          amount={amount} />\n      ))}\n    </tbody>\n    </table>\n  )\n}\n","import React from 'react';\nimport { cIconMap } from '../utils/countryIconsMap';\nexport default function ExchangeRateDisplay({currentExchangeRate}){\n  const [currencyUnits, rate] = currentExchangeRate.split(\":\");\n  const [baseCurrency, secondaryCurrency] = currencyUnits.split(\"-\");\n  return (<div className=\"d-flex flex-column\">\n    {currentExchangeRate !== '' && (\n      <>\n      <div>\n        <span>{baseCurrency}</span>\n        <span\n          className={`flag-icon flag-icon-${cIconMap[baseCurrency]}`}>\n        </span>\n        <span> to </span>\n        <span>{secondaryCurrency}</span>\n        <span\n          className={`flag-icon flag-icon-${cIconMap[secondaryCurrency]}`}>\n        </span>\n      </div>\n      <div className=\"align-self-center\"><span className=\"font-weight-bold\">Rate  </span>{rate}</div>\n      </>\n    )}\n  </div>);\n}\n","import React from 'react';\nimport { cIconMap } from '../utils/countryIconsMap';\nexport default function PocketSelect({\n  input,\n  index,\n  handleOnChangeCurrency,\n  possiblePockets\n}){\n  return (\n    <div className=\"input-group\">\n      <div>\n        <label className=\"input-group-text d-block\">\n        <span\n          className={`flag-icon flag-icon-${cIconMap[input.type]}`}>\n        </span>\n        </label>\n      </div>\n      <select id=\"inputGroupSelect01\" className=\"custom-select\" value={input.type} data-index={index} required onChange={handleOnChangeCurrency}>\n      {possiblePockets.map((pocket) => (\n              <option key={pocket} value={pocket}>\n                  {pocket}\n              </option>\n      ))}\n      </select>\n    </div>\n  );\n}\n","import React from 'react';\nimport clsx from 'clsx';\nexport default function CurrencyInput({errorMessage, input, index, handleOnChangeAmount}){\n  return (\n    <div className=\"input-group d-flex\">\n    <input type=\"text\"\n      className={clsx(\"form-control\", \"p-2\", errorMessage && index === 0 && 'is-invalid')}\n      value={input.amount}\n      data-index={index}\n      onBlur={handleOnChangeAmount}\n      onChange={handleOnChangeAmount}\n    />\n    {errorMessage && index === 0 && (\n      <div className={clsx(\"p-2\", 'invalid-tooltip')}>\n        {errorMessage}\n      </div>\n    )}\n    </div>\n  )\n}\n","import React from 'react'\nimport ExchangeRateDisplay from './ExchangeRateDisplay';\nimport PocketSelect from './PocketSelect';\nimport CurrencyInput from './CurrencyInput';\nexport default function ExchangeTypeForm({\n  input,\n  index,\n  pockets,\n  handleOnChangeCurrency,\n  handleOnChangeAmount,\n  currentExchangeRate,\n  setPockets,\n  errorMessage\n}){\n  const possiblePockets = pockets.map(p => p.type);\n  return (\n    <>\n    <div className=\"d-flex\">\n      <PocketSelect\n      input={input}\n      index={index}\n      handleOnChangeCurrency={handleOnChangeCurrency}\n      possiblePockets={possiblePockets} />\n      <CurrencyInput\n        errorMessage={errorMessage}\n        input={input}\n        index={index}\n        handleOnChangeAmount={handleOnChangeAmount} />\n    </div>\n    {index === 0 && currentExchangeRate && (\n      <ExchangeRateDisplay currentExchangeRate={currentExchangeRate} />\n    )}\n    </>\n  );\n}\n","export default function checkNumberFormat(value){\n  value = String(value);\n  // remove all characters that aren't digit or dot\n  value = value.replace(/[^0-9.]/g,'');\n  // replace multiple dots with a single dot\n  value = value.replace(/\\.+/g,'.');\n  // only allow 2 digits after a dot\n  value = value.replace(/(.*\\.[0-9][0-9]?).*/g,'$1');\n  // replace multiple zeros with a single one\n  value = value.replace(/^0+(.*)$/,'0$1');\n  // remove leading zero\n  value = value.replace(/^0([^.].*)$/,'$1');\n  return value;\n}\n","import checkNumberFormat from '../utils/checkNumberFormat';\nfunction changeCurrencyUnitReducer(state, {newCurrencyUnit, indexOfCurrentInput}){\n  // if type is the same, do nothing.\n  const { inputs } = state;\n  const currentInput = inputs[indexOfCurrentInput];\n  const { type: currentType, amount: currentInputAmount } = currentInput\n  if (currentType === newCurrencyUnit){\n    return {...state};\n  }\n\n  // if newCurrencyUnit is the same as the other input, flip them.\n  const otherInput = inputs.find((inp, i) => i !== indexOfCurrentInput);\n  const { type: otherInputType, amount: otherInputAmount } = otherInput;\n  if (otherInputType === newCurrencyUnit) {\n    return {\n      inputs: [\n        {type: otherInputType, amount:otherInputAmount},\n        {type: currentType, amount: currentInputAmount}\n      ]\n    };\n  }\n\n  //otherwise, we proceed and add the new type of currency\n  const newInputs = inputs.map((input, i) => {\n    if (i === indexOfCurrentInput){\n      return {\n        ...input,\n        type: newCurrencyUnit\n      }\n    }\n    return input;\n  });\n  return {\n    inputs: newInputs\n  };\n}\nconst convertedCurrencyAmount = (newCurrencyAmount, rates, baseCurrency, secondaryCurrency) => {\n    const correctRate = rates[baseCurrency][secondaryCurrency];\n    const approximateNumber = Number(newCurrencyAmount) * Number(correctRate);\n    return checkNumberFormat(approximateNumber);\n};\n\nfunction changeCurrencyAmountReducer(state, {newCurrencyAmount, indexOfCurrentInput, rates}){\n  const { inputs } = state;\n  const sanitizedNewCurrencyAmount = checkNumberFormat(newCurrencyAmount);\n  const indexToChange = indexOfCurrentInput === 0 ? 1 : 0;\n  const baseCurrency = inputs[indexOfCurrentInput]['type'];\n  const secondaryCurrency = inputs[indexToChange]['type'];\n  const secondaryAmount = convertedCurrencyAmount(sanitizedNewCurrencyAmount, rates, baseCurrency, secondaryCurrency);\n\n  const newInputs = inputs.map(({type, amount}, idx) => {\n    if (idx === indexOfCurrentInput) {\n      return {\n        type,\n        amount: sanitizedNewCurrencyAmount\n      };\n    }\n    return {\n      type,\n      amount: secondaryAmount\n    };\n  });\n  return {\n    inputs: newInputs\n  }\n};\n\nfunction resetCurrencyReducer(state){\n  const {inputs} = state;\n  const newInputs = inputs.map((input) => (\n    {...input, amount: '0'}\n  ));\n  return {\n    inputs: newInputs\n  };\n}\nexport default function baseReducer(state, action) {\n  switch (action.type) {\n    case 'CHANGE_CURRENCY_UNIT':\n      return changeCurrencyUnitReducer(state, action.payload);\n    case 'CHANGE_CURRENCY_AMOUNT':\n      return changeCurrencyAmountReducer(state, action.payload);\n    case 'RESET_CURRENCY':\n      return resetCurrencyReducer(state)\n    default:\n      throw new Error();\n  }\n}\n","const inputStore = {\n  inputs: [\n    {type: 'USD', amount: '0'},\n    {type: 'EUR', amount: '0'}\n  ]\n};\nexport default inputStore;\n","import React, { useReducer } from 'react';\nimport ExchangeTypeForm from './ExchangeTypeForm';\nimport useDetectChangeCurrencyType from '../hooks/useDetectChangeCurrencyType';\nimport useCurrentExchangeRate from '../hooks/useCurrentExchangeRate';\nimport usePrevious from \"../hooks/usePrevious\";\nimport baseReducer from '../reducers/baseReducer';\nimport inputStore from '../stores/inputStore';\nimport useError from '../hooks/useError';\n\nexport default function Exchange({rates, pockets, setPockets}){\n  const [state, dispatch] = useReducer(baseReducer, inputStore);\n  const { inputs } = state;\n  const previousInputs = usePrevious(inputs);\n  // this effect changes the amount if the currency type changes\n  useDetectChangeCurrencyType(inputs, previousInputs, rates, dispatch);\n  // this effect fetches the current exchange rate applicable to\n  // the current inputs\n  const currentExchangeRate = useCurrentExchangeRate(inputs, rates);\n\n  const handleOnChangeCurrency = (evt) => {\n    const newCurrencyUnit = evt.target.value;\n    const indexOfCurrentInput = Number(evt.target.dataset.index);\n    dispatch({type: 'CHANGE_CURRENCY_UNIT', payload: {\n      newCurrencyUnit,\n      indexOfCurrentInput\n    }});\n  };\n\n  const handleOnChangeAmount = (evt) => {\n    let newCurrencyAmount = evt.target.value;\n    if (!newCurrencyAmount){\n      newCurrencyAmount = '0';\n    }\n    const indexOfCurrentInput = Number(evt.target.dataset.index);\n    dispatch({\n      type: 'CHANGE_CURRENCY_AMOUNT',\n      payload: {\n        newCurrencyAmount,\n        indexOfCurrentInput,\n        rates\n      }\n    });\n  };\n  const errorMessage = useError(inputs[0], pockets);\n  const isButtonDisabled = errorMessage || inputs[0]['amount'] === \"0\";\n\n  const handleExchange = () => {\n    if (isButtonDisabled){\n      return;\n    }\n    const [\n      {type: firstInputType, amount: firstInputAmount},\n      {type: secondInputType, amount: secondInputAmount}\n    ]= inputs;\n    const newPockets = pockets.map((pocket) => {\n      if (pocket.type === firstInputType){\n        const castedFirstInputAmount = Number(firstInputAmount);\n        const newAmount = (pocket.amount - castedFirstInputAmount).toFixed(2);\n        return {\n          type: pocket.type,\n          amount: Number(newAmount)\n        };\n      }\n      if (pocket.type === secondInputType){\n        const castedSecondInputAmount = Number(secondInputAmount);\n        const newAmount = (pocket.amount + castedSecondInputAmount).toFixed(2);\n        return {\n          type: pocket.type,\n          amount: Number(newAmount)\n        };\n      }\n      return pocket;\n    });\n    setPockets(newPockets);\n    dispatch({ type: 'RESET_CURRENCY' });\n  };\n\n  return (\n      <div className=\"d-flex flex-column\">\n        <div className=\"d-flex justify-content-around\">\n          {inputs.map((input, i) => {\n            return (\n              <ExchangeTypeForm\n                key={input.type}\n                handleOnChangeCurrency={handleOnChangeCurrency}\n                input={input}\n                index={i}\n                setPockets={setPockets}\n                currentExchangeRate={currentExchangeRate}\n                pockets={pockets}\n                errorMessage={errorMessage}\n                handleOnChangeAmount={handleOnChangeAmount}\n              />\n            )\n          })}\n        </div>\n        <button\n          onClick={handleExchange}\n          type=\"button\"\n          disabled={isButtonDisabled}\n          className={\n            \"btn btn-primary btn-lg align-self-center\"\n          }>\n          Exchange\n        </button>\n      </div>\n  )\n}\n","import {useRef, useEffect} from 'react'\n\nexport default function usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n","\nimport { useEffect } from \"react\";\nexport default function useDetectChangeCurrencyType(inputs, previousInputs, rates, dispatch){\n  useEffect(() => {\n    if (!previousInputs){\n      return;\n    }\n    const previousTypes = previousInputs.map(inp => inp.type).join(\"\");\n    const currentTypes = inputs.map(inp => inp.type).join(\"\");\n    const isNewTypes = previousTypes !== currentTypes;\n    if (isNewTypes) {\n      const indexOfCurrentInput = previousTypes[0] === currentTypes[0] ? 0 : 1;\n      const newCurrencyAmount = inputs[indexOfCurrentInput]['amount'];\n      dispatch({\n        type: 'CHANGE_CURRENCY_AMOUNT',\n        payload: {\n          newCurrencyAmount,\n          indexOfCurrentInput,\n          rates\n        }\n      });\n    }\n  }, [inputs, rates, previousInputs, dispatch]);\n}\n","import { useState, useEffect } from 'react';\n\nexport default function useCurrentExchangeRate(inputs, rates){\n  const [currentExchangeRate, setCurrentExchangeRate] = useState('');\n  useEffect(() => {\n    if (Object.keys(rates).length !== 0){\n      const [{type: baseCurrency}, {type: secondaryCurrency}] = inputs;\n      const rate = rates[baseCurrency][secondaryCurrency];\n      setCurrentExchangeRate(`${baseCurrency}-${secondaryCurrency}:${rate.toFixed(2)}`);\n    }\n  }, [inputs, rates])\n  return currentExchangeRate;\n}\n","import { useState, useEffect } from 'react';\nexport default function useError(input, pockets, index){\n  const [errorMessage, setErrorMessage] = useState(null);\n  useEffect(() => {\n      const {type: primaryInputType, amount: primaryInputAmount } = input;\n      const currentAmount = Number(primaryInputAmount);\n      const {amount: maximumAmount} = pockets.find(p => p.type === primaryInputType);\n      const errorMessage = currentAmount > maximumAmount ?\n        `The maximimum you can send is ${maximumAmount}` :\n        null;\n      setErrorMessage(errorMessage);\n  }, [input, pockets])\n  return errorMessage\n}\n","import React, { useState } from \"react\";\nimport Pockets from './Pockets';\nimport useRates from '../hooks/useRates';\nimport Exchange from './Exchange';\nconst CurrencyExchange = () => {\n  const rates = useRates();\n  const [pockets, setPockets] = useState([\n    {type: 'USD', amount: 150},\n    {type: 'EUR', amount: 50},\n    {type: 'GBP', amount: 100}\n  ]);\n  const isRatesEmpty = Object.keys(rates).length === 0\n  if (isRatesEmpty) {\n    return (\n      <div className=\"d-flex flex-column\">\n        <strong className=\"align-self-center\">Loading...</strong>\n        <div className=\"align-self-center spinner-border\" role=\"status\" aria-hidden=\"true\"></div>\n      </div>\n    )\n  }\n  return (\n    <div>\n      <Exchange\n        pockets={pockets}\n        setPockets={setPockets}\n        rates={rates}/>\n      <Pockets pockets={pockets}/>\n    </div>\n  );\n};\nexport default CurrencyExchange;\n","import { useState, useEffect } from \"react\";\n\nexport default function useRates(){\n  const [rates, setRates] = useState({});\n  const abortController = new AbortController();\n  const signal = abortController.signal\n  let jsonResults;\n  async function fetchData() {\n    try {\n      const resUSD = await fetch(\n        \"https://api.exchangeratesapi.io/latest?base=USD\",\n        {signal}\n      );\n      const resEuro = await fetch(\n        \"https://api.exchangeratesapi.io/latest?base=EUR\",\n        {signal}\n      );\n      const resGBP = await fetch(\n        \"https://api.exchangeratesapi.io/latest?base=GBP\",\n        {signal}\n      );\n      jsonResults = await Promise.all([resUSD.json(), resEuro.json(), resGBP.json()])\n    } catch (err) {\n      console.log(err);\n    }\n    const currencies = ['EUR', 'GBP', 'USD'];\n    const rdc = jsonResults.reduce((obj, {rates, base}) => {\n      const ratesNotIncluded = currencies\n        .filter(currency => currency !== base)\n        .map(currency => ({[currency]: rates[currency]}));\n        return {\n          ...obj,\n          [base]: ratesNotIncluded.reduce((acc, obj) => ({...acc, ...obj}), {})\n        }\n    }, {})\n    setRates(rdc);\n  }\n\n  useEffect(() => {\n    fetchData();\n    const id = setInterval(fetchData, 10000);\n    return () => {\n      clearInterval(id);\n      abortController.abort();\n    };\n    // this is not a dependency, this hook needs to run once.\n    // eslint-disable-next-line\n  }, []);\n\n  return rates;\n}\n","import React from 'react';\nimport './App.css';\nimport CurrencyExchange from './components/CurrencyExchange';\nfunction App() {\n  return (\n    <div className=\"app\">\n      <h1 className=\"app-header\"> Exchange Rates </h1>\n      <CurrencyExchange />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}